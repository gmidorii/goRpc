// Code generated by protoc-gen-go.
// source: gorpc.proto
// DO NOT EDIT!

/*
Package gorpc is a generated protocol buffer package.

It is generated from these files:
	gorpc.proto

It has these top-level messages:
	SampleReq
	SampleRes
*/
package gorpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Juice int32

const (
	Juice_calpis Juice = 0
	Juice_soda   Juice = 1
	Juice_fanta  Juice = 2
	Juice_coke   Juice = 3
)

var Juice_name = map[int32]string{
	0: "calpis",
	1: "soda",
	2: "fanta",
	3: "coke",
}
var Juice_value = map[string]int32{
	"calpis": 0,
	"soda":   1,
	"fanta":  2,
	"coke":   3,
}

func (x Juice) String() string {
	return proto.EnumName(Juice_name, int32(x))
}
func (Juice) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SampleReq struct {
	Id    int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name  string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Juice Juice    `protobuf:"varint,3,opt,name=juice,enum=gorpc.Juice" json:"juice,omitempty"`
	Slice []string `protobuf:"bytes,4,rep,name=slice" json:"slice,omitempty"`
}

func (m *SampleReq) Reset()                    { *m = SampleReq{} }
func (m *SampleReq) String() string            { return proto.CompactTextString(m) }
func (*SampleReq) ProtoMessage()               {}
func (*SampleReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SampleReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SampleReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SampleReq) GetJuice() Juice {
	if m != nil {
		return m.Juice
	}
	return Juice_calpis
}

func (m *SampleReq) GetSlice() []string {
	if m != nil {
		return m.Slice
	}
	return nil
}

type SampleRes struct {
	Mes string `protobuf:"bytes,1,opt,name=mes" json:"mes,omitempty"`
}

func (m *SampleRes) Reset()                    { *m = SampleRes{} }
func (m *SampleRes) String() string            { return proto.CompactTextString(m) }
func (*SampleRes) ProtoMessage()               {}
func (*SampleRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SampleRes) GetMes() string {
	if m != nil {
		return m.Mes
	}
	return ""
}

func init() {
	proto.RegisterType((*SampleReq)(nil), "gorpc.SampleReq")
	proto.RegisterType((*SampleRes)(nil), "gorpc.SampleRes")
	proto.RegisterEnum("gorpc.Juice", Juice_name, Juice_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GoRpc service

type GoRpcClient interface {
	GetSample(ctx context.Context, in *SampleReq, opts ...grpc.CallOption) (*SampleRes, error)
}

type goRpcClient struct {
	cc *grpc.ClientConn
}

func NewGoRpcClient(cc *grpc.ClientConn) GoRpcClient {
	return &goRpcClient{cc}
}

func (c *goRpcClient) GetSample(ctx context.Context, in *SampleReq, opts ...grpc.CallOption) (*SampleRes, error) {
	out := new(SampleRes)
	err := grpc.Invoke(ctx, "/gorpc.GoRpc/GetSample", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoRpc service

type GoRpcServer interface {
	GetSample(context.Context, *SampleReq) (*SampleRes, error)
}

func RegisterGoRpcServer(s *grpc.Server, srv GoRpcServer) {
	s.RegisterService(&_GoRpc_serviceDesc, srv)
}

func _GoRpc_GetSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRpcServer).GetSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gorpc.GoRpc/GetSample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRpcServer).GetSample(ctx, req.(*SampleReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gorpc.GoRpc",
	HandlerType: (*GoRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSample",
			Handler:    _GoRpc_GetSample_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gorpc.proto",
}

func init() { proto.RegisterFile("gorpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x90, 0x41, 0x4b, 0x05, 0x21,
	0x14, 0x85, 0x9f, 0xe3, 0xf8, 0xc8, 0x5b, 0x3c, 0xe4, 0xd2, 0x62, 0x08, 0x02, 0x71, 0x25, 0x2d,
	0x1e, 0x34, 0xed, 0xfa, 0x03, 0x0f, 0x5a, 0xda, 0x2f, 0x30, 0xc7, 0xc2, 0x9a, 0x79, 0xda, 0x38,
	0xfd, 0xff, 0x50, 0xa3, 0xa0, 0xdd, 0x39, 0x47, 0xf9, 0xce, 0xbd, 0x17, 0x2e, 0xdf, 0xe2, 0x9a,
	0xdc, 0x31, 0xad, 0x71, 0x8b, 0xc8, 0xaa, 0x51, 0x01, 0xf8, 0xb3, 0x5d, 0xd2, 0xec, 0x8d, 0xff,
	0xc4, 0x03, 0x74, 0x61, 0x1a, 0x88, 0x24, 0x9a, 0x99, 0x2e, 0x4c, 0x88, 0xd0, 0x9f, 0xed, 0xe2,
	0x87, 0x4e, 0x12, 0xcd, 0x4d, 0xd5, 0xa8, 0x80, 0xbd, 0x7f, 0x05, 0xe7, 0x07, 0x2a, 0x89, 0x3e,
	0x8c, 0x57, 0xc7, 0x06, 0x7d, 0x2a, 0x99, 0x69, 0x4f, 0x78, 0x0d, 0x2c, 0xcf, 0xe5, 0x4f, 0x2f,
	0xa9, 0xe6, 0xa6, 0x19, 0x75, 0xfb, 0x57, 0x95, 0x51, 0x00, 0x5d, 0x7c, 0xae, 0x5d, 0xdc, 0x14,
	0x79, 0x37, 0x02, 0xab, 0x10, 0x04, 0xd8, 0x3b, 0x3b, 0xa7, 0x90, 0xc5, 0x0e, 0x2f, 0xa0, 0xcf,
	0x71, 0xb2, 0x82, 0x20, 0x07, 0xf6, 0x6a, 0xcf, 0x9b, 0x15, 0x5d, 0x09, 0x5d, 0xfc, 0xf0, 0x82,
	0x8e, 0x8f, 0xc0, 0x4e, 0xd1, 0x24, 0x87, 0xf7, 0xc0, 0x4f, 0x7e, 0x6b, 0x78, 0x14, 0x3f, 0x33,
	0xfd, 0x2e, 0x76, 0xf3, 0x3f, 0xc9, 0x6a, 0xf7, 0xb2, 0xaf, 0x77, 0x78, 0xf8, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0x45, 0xd9, 0x3e, 0xb7, 0x16, 0x01, 0x00, 0x00,
}
